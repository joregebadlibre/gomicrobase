// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: api/proto/person_account.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PersonAccountService_CreatePerson_FullMethodName  = "/api.PersonAccountService/CreatePerson"
	PersonAccountService_GetPerson_FullMethodName     = "/api.PersonAccountService/GetPerson"
	PersonAccountService_CreateAccount_FullMethodName = "/api.PersonAccountService/CreateAccount"
	PersonAccountService_GetAccount_FullMethodName    = "/api.PersonAccountService/GetAccount"
)

// PersonAccountServiceClient is the client API for PersonAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonAccountServiceClient interface {
	CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
	GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
}

type personAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonAccountServiceClient(cc grpc.ClientConnInterface) PersonAccountServiceClient {
	return &personAccountServiceClient{cc}
}

func (c *personAccountServiceClient) CreatePerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonAccountService_CreatePerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personAccountServiceClient) GetPerson(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, PersonAccountService_GetPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personAccountServiceClient) CreateAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, PersonAccountService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personAccountServiceClient) GetAccount(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, PersonAccountService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonAccountServiceServer is the server API for PersonAccountService service.
// All implementations must embed UnimplementedPersonAccountServiceServer
// for forward compatibility.
type PersonAccountServiceServer interface {
	CreatePerson(context.Context, *Person) (*Person, error)
	GetPerson(context.Context, *Person) (*Person, error)
	CreateAccount(context.Context, *Account) (*Account, error)
	GetAccount(context.Context, *Account) (*Account, error)
	mustEmbedUnimplementedPersonAccountServiceServer()
}

// UnimplementedPersonAccountServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPersonAccountServiceServer struct{}

func (UnimplementedPersonAccountServiceServer) CreatePerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedPersonAccountServiceServer) GetPerson(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedPersonAccountServiceServer) CreateAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedPersonAccountServiceServer) GetAccount(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedPersonAccountServiceServer) mustEmbedUnimplementedPersonAccountServiceServer() {}
func (UnimplementedPersonAccountServiceServer) testEmbeddedByValue()                              {}

// UnsafePersonAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonAccountServiceServer will
// result in compilation errors.
type UnsafePersonAccountServiceServer interface {
	mustEmbedUnimplementedPersonAccountServiceServer()
}

func RegisterPersonAccountServiceServer(s grpc.ServiceRegistrar, srv PersonAccountServiceServer) {
	// If the following call pancis, it indicates UnimplementedPersonAccountServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PersonAccountService_ServiceDesc, srv)
}

func _PersonAccountService_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonAccountServiceServer).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonAccountService_CreatePerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonAccountServiceServer).CreatePerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonAccountService_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonAccountServiceServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonAccountService_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonAccountServiceServer).GetPerson(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonAccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonAccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonAccountService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonAccountServiceServer).CreateAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonAccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonAccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonAccountService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonAccountServiceServer).GetAccount(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonAccountService_ServiceDesc is the grpc.ServiceDesc for PersonAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PersonAccountService",
	HandlerType: (*PersonAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerson",
			Handler:    _PersonAccountService_CreatePerson_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _PersonAccountService_GetPerson_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _PersonAccountService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _PersonAccountService_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/person_account.proto",
}
